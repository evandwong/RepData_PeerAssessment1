getwd()
?abline
install.packages("UsingR")
source('~/.active-rstudio-document', echo=TRUE)
for (i==1 to 100){
print("Click")
Sys.sleep(0.2)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getwd()
setwd("~/Learning/Data Science Sequence/Reproducible Research")
setwd("~/Learning/Data Science Sequence/Reproducible Research")
?{r}
?```
?```{r}
read.csv("activity.csv")
setwd("~/Learning/Data Science Sequence/Reproducible Research/RepData_PeerAssessment1/doc")
read.csv("activity.csv")
getwd()
setwd("~/Learning/Data Science Sequence/Reproducible Research/RepData_PeerAssessment1")
read.csv("activity.csv")
source('~/.active-rstudio-document', echo=TRUE)
View(data)
stepsNA <- subset(data, steps==NA)
?subset
stepsNA <- subset(data, steps=='NA')
stepsNA <- subset(data, steps==0)
stepsNA <- subset(data, steps==FALSE)
stepsNA <- subset(data, steps==TRUE)
stepsNA <- subset(data, steps=="NA")
stepsNA <- subset(data, steps=="NaN")
str(data)
stepsNA <- subset(data, is.na(steps))
View(stepsNA)
View(data)
?hist)
?hist
hist(data$steps, data$date)
hist(data$steps)
hist(data$steps*data$date)
source('~/.active-rstudio-document', echo=TRUE)
hist(data[,"steps"])
plot(data$steps)
plot(data$steps, data$date)
plot(table(data$steps), data$date)
plot(data$steps)
plot(table(data$steps))
barplot(data$steps)
barplot(data$steps, data$date)
?barplot
plot(factor(table(data$date)))
?numcolwise()
?numcolwise(sum)
?ddply
View(data)
steps_day <- aggregate(.~date, data=data, FUN=sum)
View(steps_day)
View(data)
View(steps_day)
hist(steps_daty$steps)
hist(steps_day$steps)
hist(steps_day$steps, breaks=10)
source('~/.active-rstudio-document', echo=TRUE)
hist(steps_by_day$steps, breaks=10)
hist(steps_by_day$steps, breaks=20)
hist(steps_by_day$steps, breaks=25)
hist(steps_by_day$steps, breaks=25)
hist(steps_by_day$steps, breaks=30)
hist(steps_by_day$steps, breaks=50)
hist(steps_by_day$steps, breaks=40)
hist(steps_by_day$steps, breaks=10)
mean_steps_by_day <- mean(steps_by_day$steps)
median_steps_by_day <- median(steps_by_day$steps)
str(data)
steps_by_interval <- aggregate(.~interval, data=data, FUN=sum)
View(steps_by_interval)
plot(steps_by_interval$steps, type="l")
steps_by_interval <- aggregate(.~interval, data=data, FUN=mean)
plot(steps_by_interval$steps, type="l")
plot(mean(steps_by_interval$steps), type="l")
steps_by_interval <- aggregate(.~interval, data=data, FUN=sum)
plot(mean(steps_by_interval$steps), type="l")
plot(mean(steps_by_interval$steps), type="l")
plot(mean(steps_by_interval$steps), type="l")
steps_by_interval <- aggregate(.~interval, data=data, FUN=mean)
plot(steps_by_interval$steps, type="l")
maximum_daily_interval <- max(steps_by_interval$steps)
plot(steps_by_day$Steps, type="l")
plot(steps_by_day$steps, type="l")
subset(data, is.na(data$steps))
str(data)
missing_steps <- subset(data, is.na(data$steps))
missing_steps <- subset(data, is.na(data$date))
missing_steps <- subset(data, is.na(data$interval))
missing_steps <- subset(data, is.na(data$steps))
complete_records <- subset(data, ~is.na(data$steps))
complete_records <- subset(data, !is.na(data$steps))
mean_complete <- mean(complete_records$steps)
53*mean_complete
288*mean_complete
?apply
impute <- function(x) if (is.na(x) then x <- 2)
impute <- function(x) if (is.na(x)) x <- 2)
impute <- function(x) if (is.na(x)) x <- 2
y <- NA
impute(y)
impute(y)
impute <- function(x) if (is.na(x)) 2 else x
y <- NA
impute(y)
y <- impute(y)
y <- NA
y <- impute(y)
y <- 3
y <- impute(y)
data2 <- apply(data[,],1, imput(data$steps))
data2 <- apply(data[,],1, impute(data$steps))
data2 <- apply(data[,],1, function(x) impute(data$steps))
warning()
impute <- function(x) if (is.na(x)) mean_complete else x
data2 <- apply(data[,],1, function(x) impute(data$steps))
warnings()
data2 <- apply(data[,'steps'],1, function(x) impute(data$steps))
data2 <- apply(data[,1],1, function(x) impute(data$steps))
str(data)
str(data$steps)
data2 <- apply(data$steps,1, function(x) impute(data$steps))
dim(data$steps)
dim(as.matrix(data$steps))
data2 <- apply(as.matrix(data$steps), 1, function(x) impute(data$steps))
warnings()
max(data2)
data2 <- lapply(as.matrix(data$steps), 1, function(x) impute(data$steps))
data2 <- lapply(data$steps, function(x) impute(data$steps))
impute <- function(x) if (is.na(x)) mean_complete else x
data2 <- lapply(data$steps, impute())
data2 <- lapply(data$steps, impute)
max(data2)
data2 <- apply(data$steps, impute)
data2 <- apply(data$steps, 1, impute)
data2 <- sapply(data$steps, impute)
max(data2)
max(data$steps)
max(complete_records$steps)
median(data2)
median(data2$steps)
median(data$steps)
median(data2)
data_imputed <- data
data_impute$steps <- sapply(data$steps, impute_mean)
complete_records <- subset(data, !is.na(data$steps))
mean_complete <- mean(complete_records$steps)
impute_mean <- function(x) if (is.na(x)) mean_complete else x
data_imputed <- data
data_impute$steps <- sapply(data$steps, impute_mean)
data_imputed <- data
data_imputed$steps <- sapply(data_imputed$steps, impute_mean)
max(data_imputed)
max(data_imputed$steps)
max(data$steps)
source('~/Learning/Data Science Sequence/Reproducible Research/RepData_PeerAssessment1/project1_code.r', echo=TRUE)
data_imputed$steps <- sapply(data_imputed$steps, impute_mean)
imputed_steps_by_day <- aggregate(.~date, data=data_imputed, FUN=sum)
hist(imputed_steps_by_day$steps, breaks=10)
imputed_mean_steps_by_day <- mean(imputed_steps_by_day$steps)
imputed_median_steps_by_day <- median(imputed_steps_by_day$steps)
hist(steps_by_day$steps, breaks=10)
weekday = factor(weekday(data$date), labels=c("Weekday", "Weekend"))
weekday = factor(weekdays(data$date), labels=c("Weekday", "Weekend"))
as.date(data$date)
as.char(data$date)
as.character(data$date)
str(data$date)
as.Date(data$date, format = "%y-%m-%d")
as.Date(as.character(data$date), format = "%y-%m-%d")
as.character(data$date)
as.character(data$date)
as.character(data$date)
as.Date(as.character(data$date))
lol <- as.Date(as.character(data$date))
lol <- sapply(as.Date(as.character(data$date)))
as.character(data$date)
as.Date(date$date)
date$date <- as.character(data$date)
date$date <- lapply(data$date, as.character)
data <- read.csv("activity.csv")
## Steps by day
steps_by_day <- aggregate(.~date, data=data, FUN=sum)
hist(steps_by_day$steps, breaks=10)
mean_steps_by_day <- mean(steps_by_day$steps)
median_steps_by_day <- median(steps_by_day$steps)
## Daily Activity Pattern
steps_by_interval <- aggregate(.~interval, data=data, FUN=mean)
plot(steps_by_interval$steps, type="l")
maximum_daily_interval <- max(steps_by_interval$steps)
##Imputation
complete_records <- subset(data, !is.na(data$steps))
mean_complete <- mean(complete_records$steps)
impute_mean <- function(x) if (is.na(x)) mean_complete else x
data_imputed <- data
data_imputed$steps <- sapply(data_imputed$steps, impute_mean)
imputed_steps_by_day <- aggregate(.~date, data=data_imputed, FUN=sum)
hist(imputed_steps_by_day$steps, breaks=10)
imputed_mean_steps_by_day <- mean(imputed_steps_by_day$steps)
## Note that the median is now equal to the mean, and a non-integer
imputed_median_steps_by_day <- median(imputed_steps_by_day$steps)
## Weekday vs weekend
weekday = factor(weekdays(data$date), labels=c("Weekday", "Weekend"))
str(data$date)
date$date <- as.character(data$date)
as.character(data$date)
lol <- as.character(data$date)
lol2 <- as.Date(lol)
lol2 <- as.Date(lol[,1])
lol2 <- lapply(lol, as.Date)
lol2 <- sapply(lol, as.Date)
?weekdays
class(data$date)
as.Date(data$date, format = "%Y-%m-%d")
data2 <- data
class(data$date)
data2$date <- as.Date(data2$date, format = "%Y-%m-%d")
View(data2)
class(data2)
class(data2$date)
weekday = factor(weekdays(data$date), labels=c("Weekday", "Weekend"))
data <- read.csv("activity.csv")
data2 <- data
data2$date <- as.Date(data2$date, format = "%Y-%m-%d")
weekday = factor(weekdays(data$date), labels=c("Weekday", "Weekend"))
weekday = factor(weekdays(data2$date), labels=c("Weekday", "Weekend"))
?weekdays
?factor
weekday = factor(weekdays(data2$date), labels="Weekday")
str(weekday)
?weekdays
weekday = factor(weekdays(data2$date))
str(weekday)
data2$weekday = factor(weekdays(data2$date))
str(data2)
View(data2)
lol <- aggregate(.~weekday, data=data2)
lol <- aggregate(.~weekday, data=data2, FUN=sum)
lol <- aggregate(.~weekday, data=data2, FUN=mean)
View(lol)
str(lol$weekday)
View(lol)
weekender <- function(x){
if (x == "Saturday" | x == "Sunday") 1
else 0
}
lol$weekend <- sapply(lol$weekday, weekender)
View(lol)
data2 <- data
data2$date <- as.Date(data2$date, format = "%Y-%m-%d")
data2$weekday <- weekdays(data2$date)
lol <- aggregate(.~weekday, data=data2, FUN=mean)
weekender <- function(x){
if (x == "Saturday" | x == "Sunday") 1
else 0
}
lol$weekend <- sapply(lol$weekday, weekender)
View(lol)
data <- read.csv("activity.csv")
data2 <- data
data2$date <- as.Date(data2$date, format = "%Y-%m-%d")
weekender <- function(x){
if (weekdays(x) == "Saturday" | weekdays(x) == "Sunday") 1
else 0
}
lol$weekend <- sapply(data2$date, weekender)
lol <- aggregate(.~date, data=data2, FUN=mean)
lol$weekend <- sapply(data2$date, weekender)
lol$weekend <- sapply(lol$date, weekender)
View(lol)
View(data)
data2 <- data
data2 <- data
data2$date <- as.Date(data2$date, format = "%Y-%m-%d")
lol <- aggregate(.~date, data=data2, FUN=mean)
View(lol)
data2 <- data
dates <- aggregate(.~date, data=data, FUN=mean)
View(dates)
View(dates)
lol <- aggregate(.~date, data=data2, FUN=sum)
data <- read.csv("activity.csv")
complete_records <- subset(data, !is.na(data$steps))
mean_complete <- mean(complete_records$steps)
impute_mean <- function(x) if (is.na(x)) mean_complete else x
data_imputed <- data
data_imputed$steps <- sapply(data_imputed$steps, impute_mean)
data_weekday <- data_imputed
data_weekday$date <- as.Date(data_weekday$date, format = "%Y-%m-%d")
lol <- aggregate(.~date, data=data_weekday, FUN=sum)
View(data_imputed)
data <- read.csv("activity.csv")
complete_records <- subset(data, !is.na(data$steps))
mean_complete <- mean(complete_records$steps)
impute_mean <- function(x) if (is.na(x)) mean_complete else x
data_imputed <- data
data_imputed$steps <- sapply(data_imputed$steps, impute_mean)
data_weekday <- data_imputed
data_weekday$date <- as.Date(data_weekday$date, format = "%Y-%m-%d")
weekender <- function(x){
if (weekdays(x) == "Saturday" | weekdays(x) == "Sunday") 1
else 0
}
data_weekday$weekend <- sapply(data_weekday$date, weekender)
View(data_weekday)
data_weekday$weekend <- factor(sapply(data_weekday$date, weekender), labels=c("weekend", "weekday")
)
View(data_weekday)
data_weekday$weekend <- factor(sapply(data_weekday$date, weekender), labels=c("weekday", "weekend"))
lol <- aggregate(.~date, data=data_weekday, FUN=mean)
View(lol)
data_weekday$weekend <- factor(sapply(data_weekday$date, weekender), labels=c("weekday", "weekend"))
lol <- aggregate(.~date, data=data_weekday, FUN=mean)
View(lol)
data_weekday$weekend <- as.factor(sapply(data_weekday$date, weekender), labels=c("weekday", "weekend"))
data_weekday <- data_imputed
data_weekday$date <- as.Date(data_weekday$date, format = "%Y-%m-%d")
weekender <- function(x){
if (weekdays(x) == "Saturday" | weekdays(x) == "Sunday") "weekend"
else "weekday"
}
data_weekday$weekend <- sapply(data_weekday$date, weekender)
lol <- aggregate(.~date, data=data_weekday, FUN=mean)
View(lol)
View(data_weekday)
lol <- aggregate(.~date, data=data_weekday, FUN=max)
lol <- subset(data_weekday, !duplicated(data_weekday$date))
View(lol)
lol <- aggregate(interval~weekend, data=data_weekday, FUN=mean)
View(lol)
lol <- aggregate(weekend~interval, data=data_weekday, FUN=mean)
View(lol)
View(lol)
View(lol)
?aggregate
lol <- aggregate(steps, by=list(weekend, interval) data=data_weekday, FUN=mean)
lol <- aggregate(steps, by=list(weekend, interval) data=data_weekday, FUN="mean")
lol <- aggregate(steps, by=list(weekend, interval), data=data_weekday, FUN=mean)
View(data_weekday)
lol <- aggregate(.~steps, by=list(weekend, interval), data=data_weekday, FUN=mean)
lol <- aggregate(.~steps, by=list(data_weekday$weekend, data_weekday$interval), data=data_weekday, FUN=mean)
View(data_weekday)
lol <- aggregate(steps~list(weekend, interval), data=data_weekday, FUN=sum)
lol <- aggregate(steps~c(weekend, interval), data=data_weekday, FUN=sum)
lol <- aggregate(steps~interaction(weekend, interval), data=data_weekday, FUN=sum)
View(lol)
lol <- aggregate(steps~interaction(weekend, interval), data=data_weekday, FUN=mean)
View(lol)
View(lol)
View(lol)
lol <- aggregate(steps~interaction(interval, weekend), data=data_weekday, FUN=mean)
View(lol)
lol <- merge(aggregate(steps~interaction(interval, weekend), data=data_weekday, FUN=mean), data_weekday, by=interaction(interval, weekend))
lol <- aggregate(steps~ interval + weekend, data=data_weekday, FUN=mean)
View(lol)
View(lol)
str(data_weekday)
View(lol)
xyplot(state~interval | weekend, data=lol)
library(lattice)
xyplot(state~interval | weekend, data=lol)
xyplot(steps~interval | weekend, data=lol)
xyplot(steps~interval | weekend, data=lol, type="l")
library(lattice)
data <- read.csv("activity.csv")
steps_by_day <- aggregate(.~date, data=data, FUN=sum)
hist(steps_by_day$steps, breaks=10)
mean_steps_by_day <- mean(steps_by_day$steps)
median_steps_by_day <- median(steps_by_day$steps)
data <- read.csv("activity.csv")
## Steps by day
steps_by_day <- aggregate(.~date, data=data, FUN=sum)
hist(steps_by_day$steps, breaks=10)
mean_steps_by_day <- mean(steps_by_day$steps)
median_steps_by_day <- median(steps_by_day$steps)
print(mean_steps_by_day)
options(scipen=9)
options(digits=2)
data <- read.csv("activity.csv")
steps_by_day <- aggregate(.~date, data=data, FUN=sum)
hist(steps_by_day$steps, xlab="Total Steps Per Day", breaks=10)
mean_steps_by_day <- mean(steps_by_day$steps)
median_steps_by_day <- median(steps_by_day$steps)
steps_by_interval <- aggregate(.~interval, data=data, FUN=mean)
plot(steps_by_interval$steps, type="l")
plot(steps_by_interval$steps ~ interval, type="l")
View(steps_by_interval)
plot(steps_by_interval$steps ~ stepgs_by_interval$interval, type="l")
plot(steps_by_interval$steps ~ steps_by_interval$interval, type="l")
subset(steps_byinterval, steps==maximum_daily_interval)
maximum_daily_steps <- max(steps_by_interval$steps)
maximum_daily_interval <- (steps_by_interval, steps==maximum_daily_steps)
maximum_daily_interval <- subset(steps_by_interval, steps==maximum_daily_steps)
View(maximum_daily_interval)
maximum_daily_steps <- max(steps_by_interval$steps)
maximum_daily_interval <- subset(steps_by_interval,
steps==maximum_daily_steps,
select = interval)
```
View(maximum_daily_interval)
max <- steps_by_interval[steps ==max(steps_by_interval$steps), interval]
max <- steps_by_interval[steps==max(steps_by_interval$steps), 'interval']
max <- steps_by_interval['steps'==max(steps_by_interval$steps), 'interval']
max <- steps_by_interval[['steps'==max(steps_by_interval$steps), 'interval']]
max <- steps_by_interval['steps'==maximum_daily_steps, 'interval']
max <- steps_by_interval['steps'=maximum_daily_steps, 'interval']
select = interval)[,2]
steps_by_interval <- aggregate(.~interval, data=data, FUN=mean)
plot(steps_by_interval$steps ~ steps_by_interval$interval, type="l")
maximum_daily_steps <- max(steps_by_interval$steps)
maximum_daily_interval <- subset(steps_by_interval,
steps==maximum_daily_steps,
select = interval)[,2]
plot(steps_by_interval$steps ~ steps_by_interval$interval, type="l")
maximum_daily_steps <- max(steps_by_interval$steps)
maximum_daily_interval <- subset(steps_by_interval,
steps==maximum_daily_steps,
select = interval)[,1]
options(scipen=9)
options(digits=2)
data <- read.csv("activity.csv")
steps_by_interval <- aggregate(.~interval, data=data, FUN=mean)
plot(steps_by_interval$steps ~ steps_by_interval$interval, type="l")
maximum_daily_steps <- max(steps_by_interval$steps)
maximum_daily_interval <- subset(steps_by_interval,
steps==maximum_daily_steps,
select = interval)[,1]
?strptime
maximum_daily_interval <- strptime(maximum_daily_interval, format="%H%M")
maximum_daily_interval <- strptime(maximum_daily_interval, format="%I%M")
maximum_daily_interval <- strptime(maximum_daily_interval, format="%r%M")
View(data)
maximum_daily_steps
We note that on average, the maximum number of steps taken is `r maximum_daily_steps`.
?hist
data_weekday <- data_imputed
data_imputed <- data
data_imputed$steps <- sapply(data_imputed$steps, impute_mean)
complete_records <- subset(data, !is.na(data$steps))
mean_complete <- mean(complete_records$steps)
impute_mean <- function(x) if (is.na(x)) mean_complete else x
data_imputed <- data
data_imputed$steps <- sapply(data_imputed$steps, impute_mean)
source('~/Learning/Data Science Sequence/Reproducible Research/RepData_PeerAssessment1/project1_code.r', echo=TRUE)
str(data_weekday)
data_weekday$weekend <- as.factor(data_weekday$weekend)
str(data_weekday)
data_weekday$weekend <- sapply(data_weekday$date, weekender)
data_weekday$weekend <- as.factor(data_weekday$weekend)
data_by_weekend <- aggregate(steps ~ interval + weekend, data=data_weekday, FUN=mean)
library(lattice)
xyplot(steps~interval | weekend, data=data_by_weekend, type="l")
